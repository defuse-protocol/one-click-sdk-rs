/*
 * 1Click Swap API
 *
 * API for One-Click Swaps
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct OneClickApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> OneClickApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> OneClickApiClient<C> {
        OneClickApiClient {
            configuration,
        }
    }
}

pub trait OneClickApi: Send + Sync {
    fn get_execution_status(&self, deposit_address: &str) -> Pin<Box<dyn Future<Output = Result<models::GetExecutionStatusResponse, Error>> + Send>>;
    fn get_quote(&self, quote_request: models::QuoteRequest) -> Pin<Box<dyn Future<Output = Result<models::QuoteResponse, Error>> + Send>>;
    fn get_tokens(&self, ) -> Pin<Box<dyn Future<Output = Result<Vec<models::TokenResponse>, Error>> + Send>>;
    fn submit_deposit_tx(&self, submit_deposit_tx_request: models::SubmitDepositTxRequest) -> Pin<Box<dyn Future<Output = Result<models::SubmitDepositTxResponse, Error>> + Send>>;
}

impl<C: Connect>OneClickApi for OneClickApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn get_execution_status(&self, deposit_address: &str) -> Pin<Box<dyn Future<Output = Result<models::GetExecutionStatusResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v0/status".to_string())
        ;
        req = req.with_query_param("depositAddress".to_string(), deposit_address.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_quote(&self, quote_request: models::QuoteRequest) -> Pin<Box<dyn Future<Output = Result<models::QuoteResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v0/quote".to_string())
        ;
        req = req.with_body_param(quote_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_tokens(&self, ) -> Pin<Box<dyn Future<Output = Result<Vec<models::TokenResponse>, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v0/tokens".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn submit_deposit_tx(&self, submit_deposit_tx_request: models::SubmitDepositTxRequest) -> Pin<Box<dyn Future<Output = Result<models::SubmitDepositTxResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v0/deposit/submit".to_string())
        ;
        req = req.with_body_param(submit_deposit_tx_request);

        req.execute(self.configuration.borrow())
    }

}
